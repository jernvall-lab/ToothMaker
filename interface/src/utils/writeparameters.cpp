/**
 * @file writeparameters.cpp
 * @brief Writes model parameters into a file.
 *
 * User calls Export_parameters().
 *
 * Supported file formats: MorphoMaker, Humppa.
 *
 */

#include <stdio.h>
#include <vector>
#include <iostream>

#include "utils/writeparameters.h"
#include "morphomaker.h"


namespace {

/**
 * @brief Writes native format parameters file.
 * @param parameters    Parameters object.
 * @param outname       File name with full path.
 * @return              0 if success, else -1.
 */
int write_parameters_MorphoMaker_(Parameters *parameters, const char *outname)
{
    uint16_t i;

    FILE* output = fopen(outname, "w");
    if (output == NULL) {
        fprintf(stderr, "Error: Can't open file '%s' for writing.\n", outname);
        return -1;
    }

    #if defined(__linux__)
    char *oldloc = setlocale(LC_ALL, "C");
    #endif

    fprintf(output, "# Model parameters file generated by %s %s.\n", PROGRAM_NAME, MMAKER_VERSION);
    fprintf(output, "# NOTE: Parameter names are case-sensitive, while non-parameter keywords\n");
    fprintf(output, "# (e.g. model, viewtresh) are case-insensitive!\n");
    fprintf(output, "\n");

    auto keywords = parameters->getKeywords();
    if (keywords == NULL) {
        fclose(output);
        return -1;
    }

    fprintf(output, "# Model name, view threshold, view mode, iterations.\n");
    for (i=0; i<keywords->size(); i++) {
        fprintf(output, "%s==%s\n", keywords->at(i).c_str(),
                        parameters->getKey(keywords->at(i)).c_str());
    }
    fprintf(output, "\n");

    fprintf(output, "# Parameters.\n");
    for (auto& p : parameters->getParameters()) {
        if (p.hidden) {
            continue;
        }
        fprintf( output, "%s==%.7f\n", p.name.c_str(), p.value );
    }

    #if defined(__linux__)
    setlocale(LC_ALL, oldloc);
    #endif

    fclose(output);

    return 0;
}



/**
 * @brief Writes parameter file for humppa, humppa_translate.
 * @param parameters    Parameters object.
 * @param outname       File name with full path.
 * @return              0 if success, else -1.
 */
int write_parameters_Humppa_(Parameters *parameters, const char *outname)
{
    FILE* output = fopen(outname, "w");
    if (output == NULL) {
        fprintf(stderr, "Error: Can't open file '%s' for writing.\n", outname);
        return -1;
    }

    #if defined(__linux__)
    char *oldloc = setlocale(LC_ALL, "C");
    #endif

    auto par = parameters->getParameters();
    for (auto& p : par)
        fprintf( output, "%.7f #\n", p.value );

    #if defined(__linux__)
    setlocale(LC_ALL, oldloc);
    #endif

    fclose(output);

    return 0;
}

}   // END namespace



/**
 * @brief Writes current model parameters into a text file in given format.
 * @param par       Parameters object.
 * @param file      File name with full path.
 * @param format    Export file format.
 * @return          0 if sucess, else -1.
 */
int morphomaker::Export_parameters(Parameters *par, const std::string file,
                                   const QString& format)
{
    if (par == NULL) {
        return -1;
    }

    int rv = -1;
    if (format == PROGRAM_NAME || format == "") {
        rv = write_parameters_MorphoMaker_(par, file.c_str());
    }
    else if (format == "Humppa") {
        rv = write_parameters_Humppa_(par, file.c_str());
    }
    else {
        std::cerr << "Fatal error: Unknown input format '"
                  << format.toStdString()
                  << "'. Please check <InputStyle> in the model XML file. "
                  << std::endl;
    }

    return rv;
}
